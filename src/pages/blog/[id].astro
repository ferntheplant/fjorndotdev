---
import Header from "@/src/components/Header.astro";
import BaseLayout from "@/src/layouts/BaseLayout.astro";
import { formatDate } from "@/src/lib/utils";
import { getCollection, render } from "astro:content";

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  return posts.map((post) => ({
    params: { id: post.id },
    props: { post },
  }));
}

const { post } = Astro.props;
const { Content } = await render(post);
console.log(post.data.pubDate);
---

<BaseLayout
  title={post.data.title}
  description={post.data.description}
  canonicalUrl="https://fjorn.dev/blog/"
  type="article"
>
  <Header />
  <main class="border-primary border p-8">
    <h1 class="pb-4 text-3xl font-bold">{post.data.title}</h1>
    <time datetime={post.data.pubDate.toISOString()} class="pb-4 opacity-70">
      {formatDate(post.data.pubDate)}
    </time>
    <hr
      class="border-foreground my-4 border-0 border-b-1 border-dashed opacity-70"
    />
    <div class="markdown">
      <Content />
    </div>
  </main>
</BaseLayout>

<script is:inline>
  addEventListener("click", (e) => {
    const btn = e.target.closest("button.footnote-ref[data-fn-id]");
    if (!btn) return;
    const id = btn.getAttribute("data-fn-id");
    const controls = btn.getAttribute("aria-controls");
    if (!controls) return;

    // Find the inline aside that immediately follows the block
    const block = btn.closest("p,li,blockquote,figure,div,section,article");
    const aside = block?.nextElementSibling;
    if (!aside || aside.id !== controls) return;

    const isOpen = aside.hasAttribute("hidden") ? false : true;
    if (isOpen) {
      aside.setAttribute("hidden", "");
      btn.setAttribute("aria-expanded", "false");
    } else {
      aside.removeAttribute("hidden");
      btn.setAttribute("aria-expanded", "true");
      // Optional: keep context; do not jump. Gentle nudge if off-screen:
      const rect = aside.getBoundingClientRect();
      const vh = Math.max(
        document.documentElement.clientHeight || 0,
        window.innerHeight || 0,
      );
      if (rect.top < 0 || rect.bottom > vh) {
        aside.scrollIntoView({ block: "nearest", behavior: "smooth" });
      }
    }
  });
</script>

<style is:global>
  .footnote-inline {
    padding: 0.75rem;
    border-left: 3px solid var(--primary);
  }
  .footnote-inline p {
    color: color-mix(in oklch, var(--foreground) 70%, transparent);
    font-size: 0.85em;
    margin: 0 !important;
  }
  .footnotes {
    display: none;
  } /* or your visually-hidden utility */
  .footnote-ref {
    all: unset;
    cursor: pointer;
  }
  sup {
    border-bottom: 3px solid var(--primary);
  }
  sup:hover {
    color: var(--background);
    background-color: var(--primary);
  }

  /* Hide the h1 since we already have the title above */
  .markdown h1 {
    display: none !important;
  }

  /* Basic typography styling for MDX content */
  .markdown {
    line-height: 1.7;
    color: var(--foreground);
  }

  .markdown h2 {
    font-size: 1.75rem;
    font-weight: 700;
    margin-top: 2rem;
    margin-bottom: 1rem;
  }

  .markdown h2:hover {
    color: var(--background);
    background-color: var(--primary);
  }

  .markdown h2::before {
    content: "# ";
    color: var(--primary);
  }

  .markdown h2:hover::before {
    content: "# ";
    background-color: var(--primary);
    color: var(--background);
  }

  .markdown h3 {
    font-size: 1.5rem;
    font-weight: 600;
    margin-top: 1.5rem;
    margin-bottom: 0.75rem;
  }

  .markdown h3:hover {
    color: var(--background);
    background-color: var(--primary);
  }

  .markdown h3::before {
    content: "## ";
    color: var(--primary);
  }

  .markdown h3:hover::before {
    content: "## ";
    background-color: var(--primary);
    color: var(--background);
  }

  .markdown h4 {
    font-size: 1.25rem;
    font-weight: 600;
    margin-top: 1rem;
    margin-bottom: 0.5rem;
  }

  .markdown h4:hover {
    color: var(--background);
    background-color: var(--primary);
  }

  .markdown h4::before {
    content: "### ";
    color: var(--primary);
  }

  .markdown h4:hover::before {
    content: "### ";
    background-color: var(--primary);
    color: var(--background);
  }

  .markdown h5 {
    font-size: 1rem;
    font-weight: 600;
    margin-top: 0.5rem;
    margin-bottom: 0.25rem;
  }

  .markdown h2,
  h3,
  h4,
  h5 {
    width: fit-content;
  }

  .markdown h2 a,
  .markdown h3 a,
  .markdown h4 a,
  .markdown h5 a {
    border-bottom: 0;
  }

  .markdown p {
    margin-bottom: 1rem;
  }

  .markdown ul,
  .markdown ol {
    padding-left: 1.5rem;
  }

  .markdown ul {
    list-style-type: disc;
  }

  .markdown ul ul {
    list-style-type: circle;
  }

  .markdown ul ul ul {
    list-style-type: square;
  }

  .markdown ol {
    list-style-type: decimal;
  }

  .markdown ol ol {
    list-style-type: lower-alpha;
  }

  .markdown ol ol ol {
    list-style-type: lower-roman;
  }

  .markdown li {
  }

  .markdown a {
    border-bottom: 3px solid var(--primary);
  }

  .markdown a:hover {
    color: var(--background);
    background-color: var(--primary);
  }

  .markdown img {
    border-radius: 0.5rem;
    margin: 1rem 0;
  }

  .markdown pre {
    padding: 1rem;
    border-radius: 0.25rem;
    border: 1px solid var(--foreground);
    overflow-x: auto;
    margin: 1rem 0;
  }

  .markdown code:not(pre code) {
    background-color: var(--muted);
    color: var(--muted-foreground);
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.875rem;
  }

  /*
    TODO: blockquote and table
  */

  .markdown blockquote {
    border-left: 4px solid var(--primary);
    padding-left: 1rem;
    font-style: italic;
    margin: 1rem 0;
    color: var(--muted-foreground);
  }

  .markdown table {
    width: 100%;
    border-collapse: collapse;
    border: 1px solid var(--border);
    margin: 1rem 0;
  }

  .markdown th,
  .markdown td {
    border: 1px solid var(--border);
    padding: 0.5rem 1rem;
    text-align: left;
  }

  .markdown th {
    background-color: var(--muted);
    font-weight: 600;
  }
</style>
